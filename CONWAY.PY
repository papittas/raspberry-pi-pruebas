# üß¨ JUEGO DE LA VIDA DE CONWAY para Raspberry Pi Sense HAT üß¨
# Autor: GitHub Copilot
# Un aut√≥mata celular que simula la evoluci√≥n de la vida

from sense_hat import SenseHat
import time
import copy

sense = SenseHat()
sense.clear()

# üé® COLORES
DEAD_COLOR = (0, 0, 0)           # Negro - c√©lula muerta
ALIVE_COLOR = (0, 255, 0)        # Verde - c√©lula viva
CURSOR_COLOR = (255, 255, 0)     # Amarillo - cursor
EDITING_COLOR = (255, 128, 0)    # Naranja - c√©lula siendo editada

# üéÆ ESTADO DEL JUEGO
class ConwayGame:
    def __init__(self):
        # Grilla 8x8 para el juego
        self.grid = [[False for _ in range(8)] for _ in range(8)]
        self.cursor_x = 4
        self.cursor_y = 4
        self.editing_mode = True  # True = editando, False = simulando
        self.generation = 0
        self.paused = False
        
        print("üß¨ JUEGO DE LA VIDA DE CONWAY")
        print("üìã CONTROLES:")
        print("   ‚Üë‚Üì‚Üê‚Üí  : Mover cursor")
        print("   ENTER : Colocar/quitar c√©lula")
        print("   Y     : Iniciar/pausar simulaci√≥n")
        print("   SPACE : Limpiar grilla")
        print("   R     : Modo edici√≥n")
        print("   ESC   : Salir")
        print("\nüéØ ¬°Crea patrones y observa la evoluci√≥n!")
        
    def count_neighbors(self, x, y):
        """Cuenta los vecinos vivos de una c√©lula"""
        count = 0
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                nx, ny = x + dx, y + dy
                # Verificar l√≠mites
                if 0 <= nx < 8 and 0 <= ny < 8:
                    if self.grid[ny][nx]:
                        count += 1
        return count
    
    def evolve(self):
        """Aplica las reglas del Juego de la Vida para la siguiente generaci√≥n"""
        new_grid = [[False for _ in range(8)] for _ in range(8)]
        
        for y in range(8):
            for x in range(8):
                neighbors = self.count_neighbors(x, y)
                
                # Reglas del Juego de la Vida de Conway:
                if self.grid[y][x]:  # C√©lula viva
                    # 1. Cualquier c√©lula viva con 2 o 3 vecinos vivos sobrevive
                    if neighbors == 2 or neighbors == 3:
                        new_grid[y][x] = True
                    # 2. De lo contrario, muere por soledad o sobrepoblaci√≥n
                else:  # C√©lula muerta
                    # 3. Cualquier c√©lula muerta con exactamente 3 vecinos vivos nace
                    if neighbors == 3:
                        new_grid[y][x] = True
        
        self.grid = new_grid
        self.generation += 1
        
        print(f"üß¨ Generaci√≥n {self.generation}")
        
        # Verificar si hay c√©lulas vivas
        alive_count = sum(sum(row) for row in self.grid)
        if alive_count == 0:
            print("üíÄ Todas las c√©lulas han muerto - simulaci√≥n detenida")
            self.editing_mode = True
            self.generation = 0
    
    def toggle_cell(self, x, y):
        """Alternar el estado de una c√©lula"""
        self.grid[y][x] = not self.grid[y][x]
        action = "colocada" if self.grid[y][x] else "eliminada"
        print(f"üéØ C√©lula {action} en ({x}, {y})")
    
    def clear_grid(self):
        """Limpiar toda la grilla"""
        self.grid = [[False for _ in range(8)] for _ in range(8)]
        self.generation = 0
        print("üßπ Grilla limpiada")
    
    def load_pattern(self, pattern_name):
        """Cargar patrones predefinidos"""
        self.clear_grid()
        
        if pattern_name == "glider":
            # Glider cl√°sico
            pattern = [(1, 0), (2, 1), (0, 2), (1, 2), (2, 2)]
            for x, y in pattern:
                if 0 <= x < 8 and 0 <= y < 8:
                    self.grid[y][x] = True
            print("üõ∏ Patr√≥n 'Glider' cargado")
            
        elif pattern_name == "blinker":
            # Oscilador simple
            pattern = [(3, 4), (4, 4), (5, 4)]
            for x, y in pattern:
                if 0 <= x < 8 and 0 <= y < 8:
                    self.grid[y][x] = True
            print("üí´ Patr√≥n 'Blinker' cargado")
            
        elif pattern_name == "block":
            # Bloque est√°tico
            pattern = [(3, 3), (3, 4), (4, 3), (4, 4)]
            for x, y in pattern:
                if 0 <= x < 8 and 0 <= y < 8:
                    self.grid[y][x] = True
            print("üü© Patr√≥n 'Block' cargado")
            
        elif pattern_name == "toad":
            # Oscilador toad
            pattern = [(2, 3), (3, 3), (4, 3), (1, 4), (2, 4), (3, 4)]
            for x, y in pattern:
                if 0 <= x < 8 and 0 <= y < 8:
                    self.grid[y][x] = True
            print("üê∏ Patr√≥n 'Toad' cargado")
    
    def render(self):
        """Renderizar la grilla en el Sense HAT"""
        for y in range(8):
            for x in range(8):
                if self.editing_mode and x == self.cursor_x and y == self.cursor_y:
                    # Mostrar cursor en modo edici√≥n
                    if self.grid[y][x]:
                        color = EDITING_COLOR  # Naranja si hay c√©lula
                    else:
                        color = CURSOR_COLOR   # Amarillo si est√° vac√≠o
                else:
                    # Mostrar c√©lula normal
                    color = ALIVE_COLOR if self.grid[y][x] else DEAD_COLOR
                
                sense.set_pixel(x, y, color)
        
        # Mostrar informaci√≥n en pantalla cada cierto tiempo
        if self.editing_mode:
            # Parpadeo suave del cursor
            cursor_brightness = 0.7 + 0.3 * abs(time.time() % 1 - 0.5) * 2
            cursor_color = tuple(int(c * cursor_brightness) for c in CURSOR_COLOR)
            sense.set_pixel(self.cursor_x, self.cursor_y, cursor_color)

def handle_keyboard_input(game):
    """Maneja la entrada del teclado usando los eventos del joystick del Sense HAT"""
    
    def joystick_pressed(event):
        if event.action != 'pressed':
            return
            
        if event.direction == 'up':
            game.cursor_y = max(0, game.cursor_y - 1)
            print(f"üìç Cursor en ({game.cursor_x}, {game.cursor_y})")
            
        elif event.direction == 'down':
            game.cursor_y = min(7, game.cursor_y + 1)
            print(f"üìç Cursor en ({game.cursor_x}, {game.cursor_y})")
            
        elif event.direction == 'left':
            game.cursor_x = max(0, game.cursor_x - 1)
            print(f"üìç Cursor en ({game.cursor_x}, {game.cursor_y})")
            
        elif event.direction == 'right':
            game.cursor_x = min(7, game.cursor_x + 1)
            print(f"üìç Cursor en ({game.cursor_x}, {game.cursor_y})")
            
        elif event.direction == 'middle':
            if game.editing_mode:
                # ENTER - Colocar/quitar c√©lula
                game.toggle_cell(game.cursor_x, game.cursor_y)
            else:
                # En modo simulaci√≥n, pausar/reanudar
                game.paused = not game.paused
                status = "pausada" if game.paused else "reanudada"
                print(f"‚èØÔ∏è Simulaci√≥n {status}")
    
    sense.stick.direction_any = joystick_pressed

def show_startup_animation():
    """Animaci√≥n de inicio"""
    sense.show_message("CONWAY", text_colour=[0, 255, 0], scroll_speed=0.08)
    sense.show_message("LIFE", text_colour=[255, 255, 0], scroll_speed=0.08)
    
    # Efecto de "c√©lulas naciendo"
    for frame in range(20):
        for x in range(8):
            for y in range(8):
                if (x + y + frame) % 4 == 0:
                    intensity = min(255, frame * 13)
                    sense.set_pixel(x, y, (0, intensity, 0))
        time.sleep(0.1)
    
    time.sleep(0.5)
    sense.clear()

def show_menu():
    """Mostrar men√∫ de patrones"""
    print("\nüéØ PATRONES DISPONIBLES:")
    print("   1: Glider (se mueve)")
    print("   2: Blinker (oscila)")
    print("   3: Block (est√°tico)")
    print("   4: Toad (oscila)")
    print("   C: Continuar editando")

def main():
    print("üß¨" * 25)
    print("     JUEGO DE LA VIDA DE CONWAY")
    print("       Sense HAT Edition")
    print("üß¨" * 25)
    
    show_startup_animation()
    
    game = ConwayGame()
    handle_keyboard_input(game)
    
    # Cargar un patr√≥n inicial
    game.load_pattern("glider")
    
    print("\n‚ú® ¬°Juego iniciado!")
    print("üéÆ Usa el joystick para navegar")
    print("üìù Modo: EDICI√ìN")
    
    last_evolution = time.time()
    evolution_speed = 1.0  # segundos entre generaciones
    
    try:
        while True:
            current_time = time.time()
            
            # Renderizar siempre
            game.render()
            
            # Evoluci√≥n autom√°tica en modo simulaci√≥n
            if not game.editing_mode and not game.paused:
                if current_time - last_evolution >= evolution_speed:
                    game.evolve()
                    last_evolution = current_time
            
            # Controles especiales por teclado simulado
            # (En una implementaci√≥n real, aqu√≠ ir√≠an las teclas del teclado)
            
            time.sleep(0.05)  # 20 FPS
            
    except KeyboardInterrupt:
        print("\nüèÅ Fin de la simulaci√≥n")
        print(f"üìä Generaciones completadas: {game.generation}")
        
        # Animaci√≥n de cierre
        for fade in range(255, 0, -15):
            for x in range(8):
                for y in range(8):
                    if game.grid[y][x]:
                        color = (0, fade, 0)
                        sense.set_pixel(x, y, color)
            time.sleep(0.05)
        
        sense.show_message("BYE", text_colour=[255, 255, 0], scroll_speed=0.1)
        sense.clear()

# Funci√≥n adicional para controles extendidos via input del terminal
def extended_controls():
    """Controles adicionales que se pueden usar desde el terminal"""
    print("\nüéÆ CONTROLES EXTENDIDOS:")
    print("Escribe comandos en el terminal:")
    print("  'y' + ENTER: Alternar simulaci√≥n")
    print("  'c' + ENTER: Limpiar grilla")
    print("  '1-4' + ENTER: Cargar patr√≥n")
    print("  'q' + ENTER: Salir")

if __name__ == "__main__":
    main()
